<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                        http://www.springframework.org/schema/beans/spring-beans.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd  
                        http://www.springframework.org/schema/task 
                        http://www.springframework.org/schema/task/spring-task.xsd
						http://code.alibabatech.com/schema/dubbo
       					http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <mvc:annotation-driven >
    	<!-- 使用@ResponseBody直接返回字符串时不会调用fastjson的相应方法。而且中间出现中文会出现中文乱码。以下代码就是避免以上情况出事乱码的. -->
    	<mvc:message-converters>
    		<bean class="org.springframework.http.converter.StringHttpMessageConverter">
    			<constructor-arg value="UTF-8"></constructor-arg>
    		</bean>
    	</mvc:message-converters>
    </mvc:annotation-driven>
    
    <bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:dubbo.properties</value>
			</list>
		</property>
		<property name="properties">
			<props>
				<prop key="dubbo.application.name">customized-ios</prop>
			</props>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>
	<context:component-scan base-package="com.customized" >
		<context:include-filter type="annotation" expression="com.alibaba.dubbo.config.annotation.Reference" />
		<context:exclude-filter type="annotation" expression="org.springframework.cache.annotation.EnableCaching"/>
	</context:component-scan>
     <!-- 设置freeMarker的配置文件路径
	<bean id="freemarkerConfiguration" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
	    <property name="location" value="classpath:freemarker.properties"/>
	</bean>
	配置freeMarker的模板路径 
	<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"> 
	   <property name="freemarkerSettings" ref="freemarkerConfiguration"/> 
       <property name="templateLoaderPath" value="WEB-INF/ftl/" />  
       <property name="defaultEncoding" value="UTF-8" />  
    </bean>  
    freemarker视图解析器  
    <bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">  
       <property name="suffix" value=".html" />  
       <property name="contentType" value="text/html;charset=UTF-8" />  
       此变量值为pageContext.request, 页面使用方法：rc.contextPath  
       <property name="requestContextAttribute" value="rc" />  
    </bean> -->
	<!-- Json转换 -->
	<bean id="fastJsonHttpMessageConverter"
		class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="fastJsonHttpMessageConverter" />
			</list>
		</property>
	</bean> 
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>
		
		
	<!-- 总错误处理-->
	<!-- 系统错误转发配置[并记录错误日志]   -->  
	<!-- <bean class="com.aisino.hxlc.base.utiles.AisinoMappingExceptionResolver">  
		<property name="defaultErrorView" value="error/500"></property>   默认为500，系统错误(error.jsp)   
		<property name="defaultStatusCode" value="500">
		</property>  
		<property name="statusCodes">配置多个statusCode  
		  <props>      
		      <prop key="error/500">500</prop>  error.jsp  
		      <prop key="error/404">404</prop>    error1.jsp  
		  </props>      
		</property>      
		<property name="exceptionMappings">  
		    <props>  
		        这里你可以根据需要定义N多个错误异常转发  
		        <prop key="java.sql.SQLException">error/dbError</prop> 数据库错误(dbError.jsp)  
		        <prop key="org.springframework.web.bind.ServletRequestBindingException">error/bizError</prop> 参数绑定错误(如：必须参数没传递)(bizError.jsp)  
		        <prop key="java.lang.IllegalArgumentException">error/bizError</prop>  参数错误(bizError.jsp)  
		        <prop key="org.springframework.validation.BindException">error/bizError</prop>  参数类型有误(bizError.jsp)  
		        <prop key="java.lang.Exception">error/unknowError</prop>  其他错误为'未定义错误'(unknowError.jsp)   
		    </props>  
		</property>  
	</bean>   -->
	
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	<mvc:resources location="/static/" mapping="/static/**"></mvc:resources>
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<mvc:resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/"/>
	<mvc:resources mapping="webjars/**" location="classpath:/META-INF/resources/webjars/"/>
	
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />  
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />  
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />  
    </bean>
    <bean class="com.customized.config.SwaggerConfig" />
	<import resource="classpath:dubbo/dubbo.xml" />
</beans>
